# BSV Blockchain Starter - Environment Variables Template
# Copy this file to .env and fill in your actual values
# NEVER commit the .env file to git!

# ===============================================
# DATABASE CONFIGURATION
# ===============================================

# MongoDB Connection String
# Example: mongodb://localhost:27017/labledger
# For MongoDB Atlas: mongodb+srv://<username>:<password>@<cluster>.mongodb.net/<database>
MONGODB_URI=mongodb://localhost:27017/labledger

# Database Name
DB_NAME=labledger

# ===============================================
# AUTHENTICATION CREDENTIALS
# ===============================================

# Admin user password (used during database initialization)
# IMPORTANT: Use a strong, unique password
ADMIN_PASSWORD=your_secure_admin_password_here

# Regulator user password (used during database initialization)  
# IMPORTANT: Use a strong, unique password
REGULATOR_PASSWORD=your_secure_regulator_password_here

# ===============================================
# BSV BLOCKCHAIN CONFIGURATION
# ===============================================

# BSV Network (mainnet, testnet, or regtest)
BSV_NETWORK=testnet

# WhatsOnChain API Key (optional, for better rate limits)
# Get one at: https://whatsonchain.com/
WHATSONCHAIN_API_KEY=your_whatsonchain_api_key_here

# Block Explorer API (optional)
BLOCK_EXPLORER_API_URL=https://api.whatsonchain.com/v1/bsv

# ===============================================
# WALLET CONFIGURATION
# ===============================================

# Main wallet private key (WIF format)
# CRITICAL: Never share this key. Generate using: npm run generate:keys
WALLET_PRIVATE_KEY=your_main_wallet_private_key_wif_here

# Publishing wallet private key (WIF format)
# Used for blockchain publishing operations
PUBLISHING_PRIVATE_KEY=your_publishing_wallet_private_key_wif_here

# Sweep wallet private key (WIF format)
# Used for fund consolidation operations
SWEEP_PRIVATE_KEY=your_sweep_wallet_private_key_wif_here

# ===============================================
# SECURITY CONFIGURATION
# ===============================================

# JWT Secret for authentication tokens
# Generate a random 64-character string
JWT_SECRET=your_jwt_secret_key_64_characters_minimum_random_string_here

# Session Secret for cookie signing
# Generate a random 32-character string
SESSION_SECRET=your_session_secret_32_chars_min

# Encryption key for sensitive data
# Generate using: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
ENCRYPTION_KEY=your_32_byte_hex_encryption_key_here

# ===============================================
# EXTERNAL SERVICES
# ===============================================

# Email service configuration (for notifications)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your_email@example.com
SMTP_PASSWORD=your_email_password_or_app_password

# API Rate limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# ===============================================
# DEVELOPMENT CONFIGURATION
# ===============================================

# Application environment
NODE_ENV=development

# Server port
PORT=3000

# Log level (error, warn, info, debug)
LOG_LEVEL=info

# Enable debug mode
DEBUG=false

# ===============================================
# ZERO-KNOWLEDGE PROOF CONFIGURATION
# ===============================================

# ZK Proof service endpoint (if using external service)
ZK_PROOF_SERVICE_URL=

# ZK Proof service API key
ZK_PROOF_API_KEY=

# ===============================================
# MONITORING & ANALYTICS
# ===============================================

# Application monitoring service
MONITORING_API_KEY=

# Error tracking service
ERROR_TRACKING_DSN=

# ===============================================
# SECURITY NOTES
# ===============================================

# 1. NEVER commit this file with real values to version control
# 2. Use different passwords for each environment (dev, staging, prod)
# 3. Regularly rotate all passwords and API keys
# 4. Use environment-specific values for each deployment
# 5. Store production secrets in secure key management systems
# 6. Audit access to these credentials regularly
# 7. Use the principle of least privilege for all accounts

# ===============================================
# CREDENTIAL ROTATION SCHEDULE
# ===============================================

# Recommended rotation schedule:
# - Database passwords: Every 90 days
# - API keys: Every 90 days  
# - Private keys: Only if compromised
# - JWT secrets: Every 30 days
# - Encryption keys: Every 180 days